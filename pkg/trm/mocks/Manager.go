// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package trm

import (
	"context"

	"github.com/SergeyBogomolovv/l0-order-service/pkg/trm"
	mock "github.com/stretchr/testify/mock"
)

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function for the type MockManager
func (_mock *MockManager) BeginTx(ctx context.Context) (context.Context, trm.Transaction, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 context.Context
	var r1 trm.Transaction
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (context.Context, trm.Transaction, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) trm.Transaction); ok {
		r1 = returnFunc(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(trm.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockManager_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockManager_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) BeginTx(ctx interface{}) *MockManager_BeginTx_Call {
	return &MockManager_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *MockManager_BeginTx_Call) Run(run func(ctx context.Context)) *MockManager_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_BeginTx_Call) Return(context1 context.Context, transaction trm.Transaction, err error) *MockManager_BeginTx_Call {
	_c.Call.Return(context1, transaction, err)
	return _c
}

func (_c *MockManager_BeginTx_Call) RunAndReturn(run func(ctx context.Context) (context.Context, trm.Transaction, error)) *MockManager_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function for the type MockManager
func (_mock *MockManager) Do(ctx context.Context, callback func(ctx context.Context) error) error {
	ret := _mock.Called(ctx, callback)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(ctx context.Context) error) error); ok {
		r0 = returnFunc(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockManager_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - callback func(ctx context.Context) error
func (_e *MockManager_Expecter) Do(ctx interface{}, callback interface{}) *MockManager_Do_Call {
	return &MockManager_Do_Call{Call: _e.mock.On("Do", ctx, callback)}
}

func (_c *MockManager_Do_Call) Run(run func(ctx context.Context, callback func(ctx context.Context) error)) *MockManager_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(ctx context.Context) error
		if args[1] != nil {
			arg1 = args[1].(func(ctx context.Context) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_Do_Call) Return(err error) *MockManager_Do_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Do_Call) RunAndReturn(run func(ctx context.Context, callback func(ctx context.Context) error) error) *MockManager_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"OrderService/internal/entities"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderRepo creates a new instance of MockOrderRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepo {
	mock := &MockOrderRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderRepo is an autogenerated mock type for the OrderRepo type
type MockOrderRepo struct {
	mock.Mock
}

type MockOrderRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepo) EXPECT() *MockOrderRepo_Expecter {
	return &MockOrderRepo_Expecter{mock: &_m.Mock}
}

// SaveDelivery provides a mock function for the type MockOrderRepo
func (_mock *MockOrderRepo) SaveDelivery(ctx context.Context, orderUID string, d entities.Delivery) error {
	ret := _mock.Called(ctx, orderUID, d)

	if len(ret) == 0 {
		panic("no return value specified for SaveDelivery")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, entities.Delivery) error); ok {
		r0 = returnFunc(ctx, orderUID, d)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepo_SaveDelivery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveDelivery'
type MockOrderRepo_SaveDelivery_Call struct {
	*mock.Call
}

// SaveDelivery is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
//   - d entities.Delivery
func (_e *MockOrderRepo_Expecter) SaveDelivery(ctx interface{}, orderUID interface{}, d interface{}) *MockOrderRepo_SaveDelivery_Call {
	return &MockOrderRepo_SaveDelivery_Call{Call: _e.mock.On("SaveDelivery", ctx, orderUID, d)}
}

func (_c *MockOrderRepo_SaveDelivery_Call) Run(run func(ctx context.Context, orderUID string, d entities.Delivery)) *MockOrderRepo_SaveDelivery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 entities.Delivery
		if args[2] != nil {
			arg2 = args[2].(entities.Delivery)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepo_SaveDelivery_Call) Return(err error) *MockOrderRepo_SaveDelivery_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepo_SaveDelivery_Call) RunAndReturn(run func(ctx context.Context, orderUID string, d entities.Delivery) error) *MockOrderRepo_SaveDelivery_Call {
	_c.Call.Return(run)
	return _c
}

// SaveItems provides a mock function for the type MockOrderRepo
func (_mock *MockOrderRepo) SaveItems(ctx context.Context, orderUID string, items []entities.Item) error {
	ret := _mock.Called(ctx, orderUID, items)

	if len(ret) == 0 {
		panic("no return value specified for SaveItems")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []entities.Item) error); ok {
		r0 = returnFunc(ctx, orderUID, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepo_SaveItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveItems'
type MockOrderRepo_SaveItems_Call struct {
	*mock.Call
}

// SaveItems is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
//   - items []entities.Item
func (_e *MockOrderRepo_Expecter) SaveItems(ctx interface{}, orderUID interface{}, items interface{}) *MockOrderRepo_SaveItems_Call {
	return &MockOrderRepo_SaveItems_Call{Call: _e.mock.On("SaveItems", ctx, orderUID, items)}
}

func (_c *MockOrderRepo_SaveItems_Call) Run(run func(ctx context.Context, orderUID string, items []entities.Item)) *MockOrderRepo_SaveItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []entities.Item
		if args[2] != nil {
			arg2 = args[2].([]entities.Item)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepo_SaveItems_Call) Return(err error) *MockOrderRepo_SaveItems_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepo_SaveItems_Call) RunAndReturn(run func(ctx context.Context, orderUID string, items []entities.Item) error) *MockOrderRepo_SaveItems_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOrder provides a mock function for the type MockOrderRepo
func (_mock *MockOrderRepo) SaveOrder(ctx context.Context, o entities.Order) error {
	ret := _mock.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Order) error); ok {
		r0 = returnFunc(ctx, o)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepo_SaveOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOrder'
type MockOrderRepo_SaveOrder_Call struct {
	*mock.Call
}

// SaveOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - o entities.Order
func (_e *MockOrderRepo_Expecter) SaveOrder(ctx interface{}, o interface{}) *MockOrderRepo_SaveOrder_Call {
	return &MockOrderRepo_SaveOrder_Call{Call: _e.mock.On("SaveOrder", ctx, o)}
}

func (_c *MockOrderRepo_SaveOrder_Call) Run(run func(ctx context.Context, o entities.Order)) *MockOrderRepo_SaveOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entities.Order
		if args[1] != nil {
			arg1 = args[1].(entities.Order)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderRepo_SaveOrder_Call) Return(err error) *MockOrderRepo_SaveOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepo_SaveOrder_Call) RunAndReturn(run func(ctx context.Context, o entities.Order) error) *MockOrderRepo_SaveOrder_Call {
	_c.Call.Return(run)
	return _c
}

// SavePayment provides a mock function for the type MockOrderRepo
func (_mock *MockOrderRepo) SavePayment(ctx context.Context, orderUID string, p entities.Payment) error {
	ret := _mock.Called(ctx, orderUID, p)

	if len(ret) == 0 {
		panic("no return value specified for SavePayment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, entities.Payment) error); ok {
		r0 = returnFunc(ctx, orderUID, p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepo_SavePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePayment'
type MockOrderRepo_SavePayment_Call struct {
	*mock.Call
}

// SavePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
//   - p entities.Payment
func (_e *MockOrderRepo_Expecter) SavePayment(ctx interface{}, orderUID interface{}, p interface{}) *MockOrderRepo_SavePayment_Call {
	return &MockOrderRepo_SavePayment_Call{Call: _e.mock.On("SavePayment", ctx, orderUID, p)}
}

func (_c *MockOrderRepo_SavePayment_Call) Run(run func(ctx context.Context, orderUID string, p entities.Payment)) *MockOrderRepo_SavePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 entities.Payment
		if args[2] != nil {
			arg2 = args[2].(entities.Payment)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepo_SavePayment_Call) Return(err error) *MockOrderRepo_SavePayment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepo_SavePayment_Call) RunAndReturn(run func(ctx context.Context, orderUID string, p entities.Payment) error) *MockOrderRepo_SavePayment_Call {
	_c.Call.Return(run)
	return _c
}
